"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _default = api => {
  api.describe({
    key: 'exportStatic',
    config: {
      schema(joi) {
        return joi.object({
          htmlSuffix: joi.boolean(),
          dynamicRoot: joi.boolean()
        });
      }

    }
  });
  api.modifyConfig(memo => {
    var _memo$exportStatic;

    if ((_memo$exportStatic = memo.exportStatic) === null || _memo$exportStatic === void 0 ? void 0 : _memo$exportStatic.dynamicRoot) {
      memo.runtimePublicPath = true;
    }

    return memo;
  });
  api.onPatchRoute(({
    route
  }) => {
    var _api$config$exportSta;

    if (!((_api$config$exportSta = api.config.exportStatic) === null || _api$config$exportSta === void 0 ? void 0 : _api$config$exportSta.htmlSuffix)) return;

    if (route.path) {
      route.path = addHtmlSuffix(route.path, !!route.routes);
    }
  });
  api.onPatchRoutes(({
    routes
  }) => {
    if (!api.config.exportStatic) return; // copy / to /index.html

    let rootIndex = null;
    routes.forEach((route, index) => {
      if (route.path === '/' && route.exact) {
        rootIndex = index;
      }
    });

    if (rootIndex !== null) {
      routes.splice(rootIndex, 0, _objectSpread({}, routes[rootIndex], {
        path: '/index.html'
      }));
    }
  });

  function addHtmlSuffix(path, hasRoutes) {
    if (path === '/') return path;

    if (hasRoutes) {
      return path.endsWith('/') ? path : `${path}(.html)?`;
    } else {
      return path.endsWith('/') ? `${path.slice(0, -1)}.html` : `${path}.html`;
    }
  }
};

exports.default = _default;